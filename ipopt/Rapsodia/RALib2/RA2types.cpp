// This file was generated by Rapsodia (see www.mcs.anl.gov/Rapsodia)
#include <iostream>
#include <cstdlib>
#include <cmath>
#include "RA2types.hpp"

const unsigned int RA2floatS::arrSz;
RA2floatS::RA2floatS() {
  RA2floatS& l = *this;
  const float r = 0.0F;
  #include "RA2asgnP.ipp"
}

void RA2floatS::set(const int& direction, const int& degree, const float& passive) {
  #include "RA2set.ipp"
}

float RA2floatS::get(const int& direction, const int& degree) {
  float passive;
  #include "RA2get.ipp"
  return passive;
}

const RA2floatS& RA2floatS::operator =(const int& r) {
  const RA2floatS& ret = *this;
  RA2floatS& l = *this;
  #include "RA2asgnP.ipp"
  return ret;
}

const RA2floatS& RA2floatS::operator =(const float& r) {
  const RA2floatS& ret = *this;
  RA2floatS& l = *this;
  #include "RA2asgnP.ipp"
  return ret;
}

RA2floatS::RA2floatS(const int& r) {
  const RA2floatS& ret = *this;
  RA2floatS& l = *this;
  #include "RA2asgnP.ipp"
}

RA2floatS::RA2floatS(const float& r) {
  const RA2floatS& ret = *this;
  RA2floatS& l = *this;
  #include "RA2asgnP.ipp"
}

void RA2floatS::toArray(float arr[RA2floatS::arrSz]) {
  RA2floatS& l = *this;
  arr[0] = l.v;
  #include "RA2toArray.ipp"
}

void RA2floatS::fromArray(float arr[RA2floatS::arrSz]) {
  RA2floatS& l = *this;
  l.v = arr[0];
  #include "RA2fromArray.ipp"
}

const unsigned int RA2floatD::arrSz;
RA2floatD::RA2floatD() {
  RA2floatD& l = *this;
  const double r = 0.0;
  #include "RA2asgnP.ipp"
}

void RA2floatD::set(const int& direction, const int& degree, const double& passive) {
  #include "RA2set.ipp"
}

double RA2floatD::get(const int& direction, const int& degree) {
  double passive;
  #include "RA2get.ipp"
  return passive;
}

const RA2floatD& RA2floatD::operator =(const RA2floatS& r) {
  const RA2floatD& ret = *this;
  RA2floatD& l = *this;
  #include "RA2asgnA.ipp"
  return ret;
}

const RA2floatD& RA2floatD::operator =(const int& r) {
  const RA2floatD& ret = *this;
  RA2floatD& l = *this;
  #include "RA2asgnP.ipp"
  return ret;
}

const RA2floatD& RA2floatD::operator =(const float& r) {
  const RA2floatD& ret = *this;
  RA2floatD& l = *this;
  #include "RA2asgnP.ipp"
  return ret;
}

const RA2floatD& RA2floatD::operator =(const double& r) {
  const RA2floatD& ret = *this;
  RA2floatD& l = *this;
  #include "RA2asgnP.ipp"
  return ret;
}

RA2floatD::RA2floatD(const RA2floatS& r) {
  const RA2floatD& ret = *this;
  RA2floatD& l = *this;
  #include "RA2asgnA.ipp"
}

RA2floatD::RA2floatD(const int& r) {
  const RA2floatD& ret = *this;
  RA2floatD& l = *this;
  #include "RA2asgnP.ipp"
}

RA2floatD::RA2floatD(const float& r) {
  const RA2floatD& ret = *this;
  RA2floatD& l = *this;
  #include "RA2asgnP.ipp"
}

RA2floatD::RA2floatD(const double& r) {
  const RA2floatD& ret = *this;
  RA2floatD& l = *this;
  #include "RA2asgnP.ipp"
}

void RA2floatD::toArray(double arr[RA2floatD::arrSz]) {
  RA2floatD& l = *this;
  arr[0] = l.v;
  #include "RA2toArray.ipp"
}

void RA2floatD::fromArray(double arr[RA2floatD::arrSz]) {
  RA2floatD& l = *this;
  l.v = arr[0];
  #include "RA2fromArray.ipp"
}

float makeFPE(const float& n, const float& d) {
  float r;
  r = n / d;
  return r;
}

