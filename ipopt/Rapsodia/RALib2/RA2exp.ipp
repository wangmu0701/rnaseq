// This file was generated by Rapsodia (see www.mcs.anl.gov/Rapsodia)
r.v = exp(a.v);
// scale input
s.d1_1 = 1 * a.d1_1;
s.d1_2 = 2 * a.d1_2;
// compute output
t.d1_1 = r.v * s.d1_1;
r.d1_1 = t.d1_1 / 1.0;
t.d1_2 = r.v * s.d1_2 + r.d1_1 * s.d1_1;
r.d1_2 = t.d1_2 / 2.0;
// scale input
s.d2_1 = 1 * a.d2_1;
s.d2_2 = 2 * a.d2_2;
// compute output
t.d2_1 = r.v * s.d2_1;
r.d2_1 = t.d2_1 / 1.0;
t.d2_2 = r.v * s.d2_2 + r.d2_1 * s.d2_1;
r.d2_2 = t.d2_2 / 2.0;
// scale input
s.d3_1 = 1 * a.d3_1;
s.d3_2 = 2 * a.d3_2;
// compute output
t.d3_1 = r.v * s.d3_1;
r.d3_1 = t.d3_1 / 1.0;
t.d3_2 = r.v * s.d3_2 + r.d3_1 * s.d3_1;
r.d3_2 = t.d3_2 / 2.0;
// scale input
s.d4_1 = 1 * a.d4_1;
s.d4_2 = 2 * a.d4_2;
// compute output
t.d4_1 = r.v * s.d4_1;
r.d4_1 = t.d4_1 / 1.0;
t.d4_2 = r.v * s.d4_2 + r.d4_1 * s.d4_1;
r.d4_2 = t.d4_2 / 2.0;
// scale input
s.d5_1 = 1 * a.d5_1;
s.d5_2 = 2 * a.d5_2;
// compute output
t.d5_1 = r.v * s.d5_1;
r.d5_1 = t.d5_1 / 1.0;
t.d5_2 = r.v * s.d5_2 + r.d5_1 * s.d5_1;
r.d5_2 = t.d5_2 / 2.0;
// scale input
s.d6_1 = 1 * a.d6_1;
s.d6_2 = 2 * a.d6_2;
// compute output
t.d6_1 = r.v * s.d6_1;
r.d6_1 = t.d6_1 / 1.0;
t.d6_2 = r.v * s.d6_2 + r.d6_1 * s.d6_1;
r.d6_2 = t.d6_2 / 2.0;
// scale input
s.d7_1 = 1 * a.d7_1;
s.d7_2 = 2 * a.d7_2;
// compute output
t.d7_1 = r.v * s.d7_1;
r.d7_1 = t.d7_1 / 1.0;
t.d7_2 = r.v * s.d7_2 + r.d7_1 * s.d7_1;
r.d7_2 = t.d7_2 / 2.0;
// scale input
s.d8_1 = 1 * a.d8_1;
s.d8_2 = 2 * a.d8_2;
// compute output
t.d8_1 = r.v * s.d8_1;
r.d8_1 = t.d8_1 / 1.0;
t.d8_2 = r.v * s.d8_2 + r.d8_1 * s.d8_1;
r.d8_2 = t.d8_2 / 2.0;
// scale input
s.d9_1 = 1 * a.d9_1;
s.d9_2 = 2 * a.d9_2;
// compute output
t.d9_1 = r.v * s.d9_1;
r.d9_1 = t.d9_1 / 1.0;
t.d9_2 = r.v * s.d9_2 + r.d9_1 * s.d9_1;
r.d9_2 = t.d9_2 / 2.0;
// scale input
s.d10_1 = 1 * a.d10_1;
s.d10_2 = 2 * a.d10_2;
// compute output
t.d10_1 = r.v * s.d10_1;
r.d10_1 = t.d10_1 / 1.0;
t.d10_2 = r.v * s.d10_2 + r.d10_1 * s.d10_1;
r.d10_2 = t.d10_2 / 2.0;
// scale input
s.d11_1 = 1 * a.d11_1;
s.d11_2 = 2 * a.d11_2;
// compute output
t.d11_1 = r.v * s.d11_1;
r.d11_1 = t.d11_1 / 1.0;
t.d11_2 = r.v * s.d11_2 + r.d11_1 * s.d11_1;
r.d11_2 = t.d11_2 / 2.0;
// scale input
s.d12_1 = 1 * a.d12_1;
s.d12_2 = 2 * a.d12_2;
// compute output
t.d12_1 = r.v * s.d12_1;
r.d12_1 = t.d12_1 / 1.0;
t.d12_2 = r.v * s.d12_2 + r.d12_1 * s.d12_1;
r.d12_2 = t.d12_2 / 2.0;
// scale input
s.d13_1 = 1 * a.d13_1;
s.d13_2 = 2 * a.d13_2;
// compute output
t.d13_1 = r.v * s.d13_1;
r.d13_1 = t.d13_1 / 1.0;
t.d13_2 = r.v * s.d13_2 + r.d13_1 * s.d13_1;
r.d13_2 = t.d13_2 / 2.0;
// scale input
s.d14_1 = 1 * a.d14_1;
s.d14_2 = 2 * a.d14_2;
// compute output
t.d14_1 = r.v * s.d14_1;
r.d14_1 = t.d14_1 / 1.0;
t.d14_2 = r.v * s.d14_2 + r.d14_1 * s.d14_1;
r.d14_2 = t.d14_2 / 2.0;
// scale input
s.d15_1 = 1 * a.d15_1;
s.d15_2 = 2 * a.d15_2;
// compute output
t.d15_1 = r.v * s.d15_1;
r.d15_1 = t.d15_1 / 1.0;
t.d15_2 = r.v * s.d15_2 + r.d15_1 * s.d15_1;
r.d15_2 = t.d15_2 / 2.0;
// scale input
s.d16_1 = 1 * a.d16_1;
s.d16_2 = 2 * a.d16_2;
// compute output
t.d16_1 = r.v * s.d16_1;
r.d16_1 = t.d16_1 / 1.0;
t.d16_2 = r.v * s.d16_2 + r.d16_1 * s.d16_1;
r.d16_2 = t.d16_2 / 2.0;
// scale input
s.d17_1 = 1 * a.d17_1;
s.d17_2 = 2 * a.d17_2;
// compute output
t.d17_1 = r.v * s.d17_1;
r.d17_1 = t.d17_1 / 1.0;
t.d17_2 = r.v * s.d17_2 + r.d17_1 * s.d17_1;
r.d17_2 = t.d17_2 / 2.0;
// scale input
s.d18_1 = 1 * a.d18_1;
s.d18_2 = 2 * a.d18_2;
// compute output
t.d18_1 = r.v * s.d18_1;
r.d18_1 = t.d18_1 / 1.0;
t.d18_2 = r.v * s.d18_2 + r.d18_1 * s.d18_1;
r.d18_2 = t.d18_2 / 2.0;
// scale input
s.d19_1 = 1 * a.d19_1;
s.d19_2 = 2 * a.d19_2;
// compute output
t.d19_1 = r.v * s.d19_1;
r.d19_1 = t.d19_1 / 1.0;
t.d19_2 = r.v * s.d19_2 + r.d19_1 * s.d19_1;
r.d19_2 = t.d19_2 / 2.0;
// scale input
s.d20_1 = 1 * a.d20_1;
s.d20_2 = 2 * a.d20_2;
// compute output
t.d20_1 = r.v * s.d20_1;
r.d20_1 = t.d20_1 / 1.0;
t.d20_2 = r.v * s.d20_2 + r.d20_1 * s.d20_1;
r.d20_2 = t.d20_2 / 2.0;
// scale input
s.d21_1 = 1 * a.d21_1;
s.d21_2 = 2 * a.d21_2;
// compute output
t.d21_1 = r.v * s.d21_1;
r.d21_1 = t.d21_1 / 1.0;
t.d21_2 = r.v * s.d21_2 + r.d21_1 * s.d21_1;
r.d21_2 = t.d21_2 / 2.0;
// scale input
s.d22_1 = 1 * a.d22_1;
s.d22_2 = 2 * a.d22_2;
// compute output
t.d22_1 = r.v * s.d22_1;
r.d22_1 = t.d22_1 / 1.0;
t.d22_2 = r.v * s.d22_2 + r.d22_1 * s.d22_1;
r.d22_2 = t.d22_2 / 2.0;
// scale input
s.d23_1 = 1 * a.d23_1;
s.d23_2 = 2 * a.d23_2;
// compute output
t.d23_1 = r.v * s.d23_1;
r.d23_1 = t.d23_1 / 1.0;
t.d23_2 = r.v * s.d23_2 + r.d23_1 * s.d23_1;
r.d23_2 = t.d23_2 / 2.0;
// scale input
s.d24_1 = 1 * a.d24_1;
s.d24_2 = 2 * a.d24_2;
// compute output
t.d24_1 = r.v * s.d24_1;
r.d24_1 = t.d24_1 / 1.0;
t.d24_2 = r.v * s.d24_2 + r.d24_1 * s.d24_1;
r.d24_2 = t.d24_2 / 2.0;
// scale input
s.d25_1 = 1 * a.d25_1;
s.d25_2 = 2 * a.d25_2;
// compute output
t.d25_1 = r.v * s.d25_1;
r.d25_1 = t.d25_1 / 1.0;
t.d25_2 = r.v * s.d25_2 + r.d25_1 * s.d25_1;
r.d25_2 = t.d25_2 / 2.0;
// scale input
s.d26_1 = 1 * a.d26_1;
s.d26_2 = 2 * a.d26_2;
// compute output
t.d26_1 = r.v * s.d26_1;
r.d26_1 = t.d26_1 / 1.0;
t.d26_2 = r.v * s.d26_2 + r.d26_1 * s.d26_1;
r.d26_2 = t.d26_2 / 2.0;
// scale input
s.d27_1 = 1 * a.d27_1;
s.d27_2 = 2 * a.d27_2;
// compute output
t.d27_1 = r.v * s.d27_1;
r.d27_1 = t.d27_1 / 1.0;
t.d27_2 = r.v * s.d27_2 + r.d27_1 * s.d27_1;
r.d27_2 = t.d27_2 / 2.0;
// scale input
s.d28_1 = 1 * a.d28_1;
s.d28_2 = 2 * a.d28_2;
// compute output
t.d28_1 = r.v * s.d28_1;
r.d28_1 = t.d28_1 / 1.0;
t.d28_2 = r.v * s.d28_2 + r.d28_1 * s.d28_1;
r.d28_2 = t.d28_2 / 2.0;
